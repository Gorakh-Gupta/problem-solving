/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> v;
    void inorderTrav(TreeNode* root) {
        if (root == NULL)
            return;
        inorderTrav(root->left);
        v.push_back(root);
        inorderTrav(root->right);
    }

    TreeNode* CreateNewTree(int start, int end) {
        if (start > end)
            return NULL;
        int mid = start + (end - start) / 2;
        TreeNode* root = v[mid];
        root->left = CreateNewTree(start, mid - 1);
        root->right = CreateNewTree(mid + 1, end);
        return root;
    }

    TreeNode* balanceBST(TreeNode* root) {
        v.clear();
        inorderTrav(root);
        return CreateNewTree(0, v.size() - 1);
    }
};
