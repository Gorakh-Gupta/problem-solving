//Kadane algo for Maximum profit by 
//buying and selling a share/stock at most
// twice

#include<bits/stdc++.h>
using namespace std;
#define pb push_back
//int xx[12]={0,2,3,5,7,11,13,17,19,23,29,31}
//vector<int>v[maxn];
#define ll long long
#define ld long double
const ll mod =1e7+7;
const ll Mod =-1e18;
const ll N=1e6+7;
bool prime[N];

/*

void sieve(){ 
  for(int i=0;i<N;i++)
    prime[i]=true;
  
  prime[0]=false;
  prime[1]=false;
 
  for(int p=2;p*p<N;p++){
    if(prime[p]){
      for(int i=p*p;i<N;i+=p){
        prime[i]=false;
      }}}

  a[0]=0; a[1]=0;  a[2]=1;
  for(int i=3;i<=N;i++){
    if(prime[i])
      a[i]=a[i-1]+1;
    else a[i]=a[i-1];
  }}
5
2 10 3 4 20
*/

int main(){
  /*
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);*/
      
    ll t,n,m,k,l,w,x,z,y,p,d,h,j,i; 
    cin>>t;
    while(t--){
    cin>>n;
    ll a[n];
   for( i=0;i<n;i++)
   cin>>a[i];
   
   ll b[n],c[n];
   d=a[0];h=0;
   b[0]=0;
   for(i=1;i<n;i++){
     if(a[i]>d){
       k=a[i]-d;
       if(k>h){
     h=k;}}
     else d=a[i];
     b[i]=h;
   }

   d=a[n-1];h=0;
   c[n-1]=0;
   for(i=n-2;i>=0;i--){
     if(a[i]<d){
       k=d-a[i];
       if(k>h)
       h=k;}
     else d=a[i];
     c[i]=h;
    
   }
   
   ll ans=Mod;
   for(i=0;i<n-1;i++){
     ans=max(ans,b[i]+c[i+1]);
   }
   cout<<ans<<endl;}}
